"""
Algorithm thinking application 4-4

data: 2015/07/30
Author: You-Hao Chang
"""

import alg_application4_provided as app4
import AT_project_4 as pj4
import random
import matplotlib.pyplot as plt

def generate_null_distribution(seq_x, seq_y, scoring_matrix, num_trials):
    """
    To return a dictionary scoring_distribution that represents an
    un-normalized distribution generated by performing the following local 
    alignment process num_trials times.
    """
    scoring_distribution = dict()

    for dummy_idx in range(num_trials):
        tmp_y = list(seq_y)
        random.shuffle(tmp_y)
        rand_y = ''.join(tmp_y)
        alignment_matrix = pj4.compute_alignment_matrix(seq_x, rand_y, scoring_matrix, False)
        score = max([max(value) for value in alignment_matrix])
        #score, align_x, align_y = pj4.compute_local_alignment(seq_x, rand_y, scoring_matrix, alignment_matrix)
        if score not in scoring_distribution.keys():
            scoring_distribution[score] = 1
        else:
            scoring_distribution[score] += 1

    return scoring_distribution


protein_human = app4.read_protein(app4.HUMAN_EYELESS_URL)
protein_fruitfly = app4.read_protein(app4.FRUITFLY_EYELESS_URL)
scoring_matrix = app4.read_scoring_matrix(app4.PAM50_URL)

scoring_distribution = generate_null_distribution(protein_human, protein_fruitfly, scoring_matrix, 1000)
#scoring_distribution = {38: 1, 39: 1, 40: 8, 41: 9, 42: 28, 43: 35, 44: 50, 45: 46, 46: 49, 47: 57, 48: 63, 49: 62, 50: 72, 51: 56, 52: 56, 53: 61, 54: 62, 55: 32, 56: 25, 57: 33, 58: 29, 59: 22, 60: 25, 61: 15, 62: 13, 63: 10, 64: 13, 65: 20, 66: 2, 67: 4, 68: 14, 69: 5, 70: 3, 71: 2, 72: 3, 74: 2, 75: 2, 76: 1, 77: 1, 79: 2, 81: 2, 84: 1, 85: 1, 94: 1, 97: 1}

print scoring_distribution
x_value = scoring_distribution.keys()
print x_value
x_value.sort()
print x_value

y_value = []
for score in x_value:
    y_value.append(scoring_distribution[score] / float(1000) * 100)
print y_value

p1 = plt.bar(x_value, y_value, 0.5, color = 'g')

plt.xlabel('score')
plt.ylabel('fraction (in %)')
plt.title('normalized null distribution (in desktop Python)')
plt.xticks(range(0, max(x_value) + 5, 5))
plt.yticks(range(0, int(max(y_value)) + 2, 1))

plt.show()


